<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">%BOOK_ENTITIES;]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>
	
	<para>Simple client side requesting credits, with EVENT_TYPE credit control request:</para>
	<programlisting language="Java" role="JAVA">

private void doSendEventCCR(int currencyCode,int value) {
	try {
		//Create session.
		CreditControlClientSession session = this.provider.createClientSession();
		ActivityContextInterface localACI = this.acif.getActivityContextInterface(session);
		localACI.attach(this.getSbbContext().getSbbLocalObject());

		CreditControlRequest request = session.createCreditControlRequest();
	
		List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();
 
		avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_HOST, 
			("aaa://" + originIP + ":" + originPort).getBytes()));
		avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_REALM, 
			originRealm.getBytes()));
		//or dedicated:
		//request.setDestinationHost(destinationHost);
		//request.setDestinationRealm(destinationRealm);
		avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_HOST, 
			("aaa://" + destinationIP + ":" + destinationPort).getBytes()));
		avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_REALM, 
			destinationRealm.getBytes()));
		//Event Type request has request type set to '4'
		avps.add(avpFactory.getBaseFactory().createAvp(
			CreditControlAVPCodes.CC_Request_Type, 4l));
		avps.add(avpFactory.getBaseFactory().createAvp(
			CreditControlAVPCodes.CC_Request_Number, 0l));
			RequestedServiceUnitAvp rsu = this.avpFactory.createRequestedServiceUnit();
			CcMoneyAvp ccMoney = this.avpFactory.createCcMoney();
		ccMoney.setCurrencyCode(currencyCode);
		UnitValueAvp unitValue = this.avpFactory.createUnitValue();
		unitValue.setValueDigits(value);
		ccMoney.setUnitValue(unitValue);
		
		rsu.setCreditControlMoneyAvp(ccMoney);
			avps.add(rsu);
			avps.add(avpFactory.getBaseFactory().createAvp(
			CreditControlAVPCodes.Requested_Action, 0));
		//use extension avps to fill message or dedicated setters/getters
		request.setExtensionAvps(avps.toArray(new DiameterAvp[avps.size()]));
		// Now create and send
		
		if (logger.isInfoEnabled())
			logger.info("About to send:\n" + request);
			session.sendCreditControlRequest(request);
	} catch (Exception e) {
		logger.error("Failed to create/send Credit-Control-Request.", e);
	}
}
	
	
	....
	
	public void onCreditControlAnswer(CreditControlAnswer answer, ActivityContextInterface aci) {
		logger.info("Received CCA with Result-Code[" + answer.getResultCode() + "].");
		switch (answer.getCcRequestType().getValue()) {
		case 1:
		case 2:
		case 3:
			logger.error("Received 'session' credit control answer. Expecting EVENT_TYPE answer");
			break;
		case 4:
			//result code 2xxx is success
			if(answer.getResultCode()/1000 == 2 )
			{
				//assume msg is correct
				GrantedServiceUnitAvp gsu = answer.getGrantedServiceUnit();
				CcMoneyAvp money = gsu.getCreditControlMoneyAvp();
				doSpendMoney(money);
			}else
			{
				//error, this will pring formated msg dump.
				logger.warn("Result of CC operation is a failure:\n"+answer);
			}
			break;		
		}
	} 
	</programlisting>
	
	<para>Server application to handle simple direct debiting:</para>
	<programlisting language="Java" role="JAVA">
public void onCreditControlRequest(CreditControlRequest request, 
	ActivityContextInterface aci) {
	if (logger.isInfoEnabled())
		logger.info("Received Credit-Control-Request (Application-Id[" + request.getHeader().getApplicationId() + "].");

	// INITIAL_REQUEST(1), UPDATE_REQUEST(2), TERMINATION_REQUEST(3),
	// EVENT_REQUEST(4)
	CreditControlServerSession session = (CreditControlServerSession) aci.getActivity();
	CreditControlAnswer answer = null;
	if(request.getRequestedAction() == RequestedActionType.DIRECT_DEBITING)
	{
	
		switch (request.getCcRequestType().getValue()) {
		case 1:
			try {
				if (logger.isInfoEnabled())
					logger.info("Got INITIAL_REQUEST(1).");

				if (getSentInitialAnswer()) {
					logger.error("Error. Initial answer already sent! Aborting.");
					return;
				}
				
				answer = session.createCreditControlAnswer();
				if(userHasCredit(request.getUserName(),request.getRequestedServiceUnit()))
				{
					GrantedServiceUnitAvp gsu = chargeUser(request.getRequestedServiceUnit());
					answer.setGrantedServiceUnit(gsu);
					answer.setResultCode(2001);
				}else
				{
					//4012 == CREDIT_LIMIT_REACHED
					answer.setResultCode(4012);
				}
				if (logger.isInfoEnabled()) {
					logger.info("Processed Credit-Control-Request:\n" + request);
					logger.info("Sending Credit-Control-Answer:\n" + answer);
				}

				session.sendCreditControlAnswer(answer);
				this.setSentInitialAnswer(true);
			} catch (Exception e) {
				logger.error("Failed to create/send Credit-Control-Answer to reply INITIAL_REQUEST(1).", e);
			}
			break;
		case 2:
			try {
				if (logger.isInfoEnabled())
					logger.info("Got UPDATE_REQUEST(2).");

				if (getSentUpdateAnswer()) {
					logger.error("Error. Update answer already sent! Aborting.");
					return;
				}

				answer = session.createCreditControlAnswer();
				if(userHasCredit(request.getUserName(),request.getRequestedServiceUnit()))
				{
					GrantedServiceUnitAvp gsu = chargeUser(request.getRequestedServiceUnit());
					answer.setGrantedServiceUnit(gsu);
					answer.setResultCode(2001);
				}else
				{
					//4012 == CREDIT_LIMIT_REACHED
					answer.setResultCode(4012);
				}
				if (logger.isInfoEnabled()) {
					logger.info("Processed Credit-Control-Request:\n" + request);
					logger.info("Sending Credit-Control-Answer:\n" + answer);
				}
				session.sendCreditControlAnswer(answer);
				setSentUpdateAnswer(true);
			} catch (Exception e) {
				logger.error("Failed to create/send Credit-Control-Answer to reply UPDATE_REQUEST(2).", e);
			}
			break;
		case 3:
			try {
				if (logger.isInfoEnabled())
					logger.info("Got TERMINATION_REQUEST(3).");

				if (getSentTerminationAnswer()) {
					logger.error("Error. Termination answer already sent! Aborting.");
					return;
				}

				answer = session.createCreditControlAnswer();
				if(userHasCredit(request.getUserName(),request.getRequestedServiceUnit()))
				{
					GrantedServiceUnitAvp gsu = chargeUser(request.getRequestedServiceUnit());
					answer.setGrantedServiceUnit(gsu);
					answer.setResultCode(2001);
				}else
				{
					//4012 == CREDIT_LIMIT_REACHED
					answer.setResultCode(4012);
				}
				if (logger.isInfoEnabled()) {
					logger.info("Processed Credit-Control-Request:\n" + request);
					logger.info("Sending Credit-Control-Answer:\n" + answer);
				}
				session.sendCreditControlAnswer(answer);
				setSentTerminationAnswer(true);
			} catch (Exception e) {
				logger.error("Failed to create/send Credit-Control-Answer to reply TERMINATION_REQUEST(3).", e);
			}
			break;
		case 4:
			try {
				if (logger.isInfoEnabled())
					logger.info("Got EVENT_REQUEST(4).");

				answer = session.createCreditControlAnswer();
				if(userHasCredit(request.getUserName(),request.getRequestedServiceUnit()))
				{
					GrantedServiceUnitAvp gsu = chargeUser(request.getRequestedServiceUnit());
					answer.setGrantedServiceUnit(gsu);
					answer.setResultCode(2001);
				}else
				{
					//4012 == CREDIT_LIMIT_REACHED
					answer.setResultCode(4012);
				}
				if (logger.isInfoEnabled())
					logger.info("Sending Credit-Control-Answer:\n" + answer);

				session.sendCreditControlAnswer(answer);
			} catch (Exception e) {
				logger.error("Failed to create/send Credit-Control-Answer to reply EVENT_REQUEST(4).", e);
			}
			break;

		default:
			logger.error("Unexpected CC-Request-Type in message: " + request.getCcRequestType() + ". Aborting...");
		}
		}else
		{
			answer = session.createCreditControlAnswer();
			//4011 == DIAMETER_CREDIT_CONTROL_NOT_APPLICABLE
			answer.setResultCode(4011);
			session.sendCreditControlAnswer(answer);
		}
	}
	</programlisting>
</section>