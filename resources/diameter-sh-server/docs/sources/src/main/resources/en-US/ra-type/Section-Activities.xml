<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="ratype_activities">

	<title>Activities</title>

	<para>&THIS.RA; Type &THIS.VERSION;	defines the following Activities:</para>
	
	<variablelist>
		<varlistentry>
			<term>net.java.slee.resource.diameter.sh.server.ShServerActivity</term>
			<listitem>
				<para>This type of activity represents server side of Sh session. User-Data-Request (UDR), Profile-Update-Request (PUR) and Subscribe-Notifications-Request (SNR) are received in this Activity and respective Answers are sent from it.</para>
				<para>This activity type can only be created implicitly by the Resource Adaptor when receiving the above mentioned Requests. It ends once underlying Sh server session ends.</para>
				<para>This activity sessions are simple Request-Answer sessions, meaning that once the Answer is sent or received it is terminated.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>net.java.slee.resource.diameter.sh.server.ShServerNotificationActivity</term>
			<listitem>
				<para>This type of activity represents a subscription to User Data notifications for Sh session, based on User Identity. Push-Notification-Request (PNR) can be created and sent in this Activity, receiving the respective Answer (or timeout) later on this Activity.</para>
				<para>This activity type can be created with call to the <methodname>createShServerNotificationActivity</methodname> method of <classname>net.java.slee.resource.diameter.sh.server.ShServerProvider</classname>. It ends once SNR with UNSUBSCRIBE as Subs-Req-Type for the affecte User Identity is received.</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
	<para>
		All activities define methods required to properly function and	expose necessary information to	<acronym>JAIN SLEE</acronym> services.
		Sh Server Activity is defined as follows:
	</para>
	
	<programlisting role="JAVA" language="Java">
	public UserDataAnswer createUserDataAnswer(byte[] userData);

	public UserDataAnswer createUserDataAnswer(long resultCode, 
		boolean isExperimentalResult);

	public UserDataAnswer createUserDataAnswer();

	public ProfileUpdateAnswer createProfileUpdateAnswer(long resultCode, 
		boolean isExperimentalResult);

	public ProfileUpdateAnswer createProfileUpdateAnswer();

	public SubscribeNotificationsAnswer createSubscribeNotificationsAnswer();

	public SubscribeNotificationsAnswer createSubscribeNotificationsAnswer(long resultCode, 
		boolean isExperimentalResult);

	public void sendUserDataAnswer(UserDataAnswer message) throws IOException;

	public void sendProfileUpdateAnswer(ProfileUpdateAnswer message) throws IOException;

	public void sendSubscribeNotificationsAnswer(SubscribeNotificationsAnswer message)
		throws IOException;
	</programlisting>

	<variablelist>
		<varlistentry>
			<term>public UserDataAnswer createUserDataAnswer(byte[] userData);</term>
			<listitem>
				<para>This method creates a UserDataAnswer using the given parameter to populate the User-Data AVP. The Result-Code AVP is automatically set to SUCCESS. If there is no request of this type received, this method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public UserDataAnswer createUserDataAnswer(long resultCode, boolean isExperimentalResult);</term>
			<listitem>
				<para>This method creates a UserDataAnswer containing a Result-Code or Experimental-Result AVP populated with the given value. If  <parameter>isExperimentalResultCode</parameter> is <parameter>true</parameter>, the <parameter>resultCode</parameter> parameter will be set as <classname>ExperimentalResultAvp</classname> AVP, if it is <parameter>false</parameter> the result code will be set in a Result-Code AVP. If there is no request of this type received, this method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public UserDataAnswer createUserDataAnswer();</term>
			<listitem>
				<para>This method creates an empty UserDataAnswer that will need to have AVPs set on it  before being sent.If there is no request of this type received, this  method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public ProfileUpdateAnswer createProfileUpdateAnswer(long resultCode, boolean isExperimentalResult);</term>
			<listitem>
				<para>This method creates a ProfileUpdateAnswer containing a Result-Code or Experimental-Result AVP populated with the given value. If <code>isExperimentalResultCode</code> is <code>true</code>, the <code>resultCode</code> parameter will be set in a <classname>ExperimentalResultAvp</classname> AVP, if it is <code>false</code> the result code will be set in a Result-Code AVP.If there is no request of this type received, this method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public ProfileUpdateAnswer createProfileUpdateAnswer();</term>
			<listitem>
				<para>This method creates an empty ProfileUpdateAnswer that will need to have AVPs set on it before being sent.If there is no request of this type received, this method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public SubscribeNotificationsAnswer createSubscribeNotificationsAnswer();</term>
			<listitem>
				<para>This method creates an empty SubscribeNotificationsAnswer that will need to have AVPs set on it before being sent.If there is no request of this type received, this method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public SubscribeNotificationsAnswer createSubscribeNotificationsAnswer(long resultCode, boolean isExperimentalResult);</term>
			<listitem>
				<para>This method creates a SubscribeNotificationsAnswer containing a Result-Code or  Experimental-Result AVP populated with the given value. If there is no request of this type received, this method returns null.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public void sendUserDataAnswer(UserDataAnswer message) throws IOException;</term>
			<listitem>
				<para>This method sends a UserDataAnswer to the peer that sent the UserDataRequest.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public void sendProfileUpdateAnswer(ProfileUpdateAnswer message) throws IOException;</term>
			<listitem>
				<para>This method sends a ProfileUpdateAnswer to the peer that sent the ProfileUpdateRequest.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public void sendSubscribeNotificationsAnswer(SubscribeNotificationsAnswer message) throws IOException;</term>
			<listitem>
				<para>This method sends a SubscribeNotificationsAnswer to the peer that sent the SubscribeNotificationsRequest.</para>
			</listitem>
		</varlistentry>
	</variablelist>

	<para>Sh Server Notification Activity is defined as follows:</para>
	
	<programlisting role="JAVA" language="Java">
	public ShServerMessageFactory getServerMessageFactory();

	public void sendPushNotificationRequest(PushNotificationRequest message)
		throws IOException;
	</programlisting>
	
	<variablelist>
		<varlistentry>
			<term>public ShServerMessageFactory getClientMessageFactory();</term>
			<listitem>
				<para>This method returns a 'customized' message factory to manually create Sh Server Messages for this Activity.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public void sendPushNotificationRequest(PushNotificationRequest message) throws IOException;</term>
			<listitem>
				<para>This method sends a Push-Notification-Request asynchronously.</para>
			</listitem>
		</varlistentry>
	</variablelist>

	<note><para>It is safe to type cast all the mentioned Diameter Activities to it's super interface <classname>net.java.slee.resource.diameter.base.DiameterActivity</classname> defined in Diameter Base Activities section.</para></note>
</section>